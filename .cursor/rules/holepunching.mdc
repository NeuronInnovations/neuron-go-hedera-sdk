---
description: 
globs: 
alwaysApply: false
---
# Hole Punching Implementation Plan

## Overview

This document outlines the implementation plan for hole punching in the Neuron SDK, which uses libp2p for P2P communication and Hedera HCS (Hedera Consensus Service) topics for coordination. The system follows a buyer-initiated model where the buyer is not dialable and requires coordinated hole punching to establish connections.

## Current System Analysis

### Existing Flow (Working)
1. **Buyer initiates**: Sends connection request via seller's stdin topic
2. **IP Encryption**: Buyer encrypts its IP address using seller's public key
3. **Seller receives**: Decrypts IP address using its private key
4. **Direct dial**: Seller attempts to dial the buyer's IP address
5. **Connection established**: If buyer is dialable, connection succeeds

### Current Gap (Not Working)
- When buyer is **not dialable** (behind NAT/firewall), the seller's dial attempt fails
- Current system sends `PunchMe` action but doesn't implement the hole punching logic

## Hole Punching Protocol Design

### Phase 1: Initial Connection Attempt
```
Buyer → Seller: serviceRequest (encrypted IP)
Seller → Buyer: DialError + PunchMe action
```

### Phase 2: Hole Punching Coordination
```
Seller → Buyer: punchMeRequest (encrypted seller IP + timestamp)
Buyer → Seller: punchMeAcknowledgment (confirms receipt)
```

### Phase 3: Synchronized Hole Punching
```
Both parties wait for Hedera consensus timestamp + 10 seconds
Both parties simultaneously attempt to dial each other
```

## Implementation Plan

### 1. New Message Types

#### 1.1 PunchMeRequest Message
```go
type NeuronPunchMeRequestMsg struct {
    MessageType        string `json:"messageType"`
    EncryptedIpAddress []byte `json:"i"` // Seller's IP encrypted with buyer's public key
    StdInTopic         uint64 `json:"o"` // Buyer's stdin topic
    PublicKey          string `json:"k"` // Seller's public key
    HederaTimestamp    string `json:"t"` // Timestamp from the HCS message
    PunchDelay         int    `json:"d"` // Delay in seconds (default: 10)
    Version            string `json:"v"`
}
```

#### 1.2 PunchMeAcknowledgment Message
```go
type NeuronPunchMeAcknowledgmentMsg struct {
    MessageType     string `json:"messageType"`
    RequestTopic    uint64 `json:"r"` // Topic where punchMeRequest was received
    PublicKey       string `json:"k"` // Buyer's public key
    HederaTimestamp string `json:"t"` // Same timestamp from punchMeRequest
    Version         string `json:"v"`
}
```

### 2. Enhanced Error Handling

#### 2.1 Seller Side (seller-case.go)
```go
// In the DialError case, replace the current PunchMe handling:
case types.DialError:
    if sellerError.RecoverAction == types.PunchMe {
        // Send punchMeRequest instead of just error
        punchMeEnvelope := preparePunchMeRequest(otherPeerID, otherSideStdIn)
        hedera_helper.SendTransactionEnvelope(punchMeEnvelope)
    }
```

#### 2.2 Buyer Side (buyer-case.go)
```go
// Add new message type handling:
case "punchMeRequest":
    handlePunchMeRequest(topicMessage, p2pHost, sellerBuffers, protocol)
case "punchMeAcknowledgment":
    handlePunchMeAcknowledgment(topicMessage, p2pHost, sellerBuffers, protocol)
```

### 3. Core Hole Punching Functions

#### 3.1 Seller: Prepare PunchMe Request
```go
func preparePunchMeRequest(buyerPeerID peer.ID, buyerStdIn hedera.TopicID) (types.TopicPostalEnvelope, error) {
    // 1. Get seller's public addresses
    sellerAddresses := p2pHost.Addrs()
    
    // 2. Encrypt seller's IP with buyer's public key
    buyerPublicKey := getBuyerPublicKey(buyerPeerID)
    encryptedIP := keylib.EncryptForOtherside(sellerAddresses, os.Getenv("private_key"), buyerPublicKey)
    
    // 3. Create punchMeRequest message
    punchMeMsg := types.NeuronPunchMeRequestMsg{
        MessageType:        "punchMeRequest",
        EncryptedIpAddress: encryptedIP,
        StdInTopic:         buyerStdIn.Topic,
        PublicKey:          getSellerPublicKey(),
        HederaTimestamp:    time.Now().Format(time.RFC3339Nano),
        PunchDelay:         10,
        Version:            "0.4",
    }
    
    return types.TopicPostalEnvelope{
        OtherStdInTopic: buyerStdIn,
        Message:         punchMeMsg,
    }, nil
}
```

#### 3.2 Buyer: Handle PunchMe Request
```go
func handlePunchMeRequest(topicMessage hedera.TopicMessage, p2pHost host.Host, sellerBuffers *commonlib.NodeBuffers, protocol protocol.ID) {
    // 1. Parse punchMeRequest
    var punchMeMsg types.NeuronPunchMeRequestMsg
    json.Unmarshal(topicMessage.Contents, &punchMeMsg)
    
    // 2. Decrypt seller's IP address
    sellerIP, err := keylib.DecryptFromOtherside(
        punchMeMsg.EncryptedIpAddress, 
        os.Getenv("private_key"), 
        punchMeMsg.PublicKey,
    )
    if err != nil {
        log.Printf("Failed to decrypt seller IP: %v", err)
        return
    }
    
    // 3. Send acknowledgment
    ackEnvelope := preparePunchMeAcknowledgment(punchMeMsg)
    hedera_helper.SendTransactionEnvelope(ackEnvelope)
    
    // 4. Schedule synchronized hole punching
    scheduleHolePunching(punchMeMsg.HederaTimestamp, punchMeMsg.PunchDelay, sellerIP, p2pHost, protocol)
}
```

#### 3.3 Synchronized Hole Punching
```go
func scheduleHolePunching(hederaTimestamp string, delaySeconds int, sellerIP string, p2pHost host.Host, protocol protocol.ID) {
    // 1. Parse Hedera timestamp
    consensusTime, err := time.Parse(time.RFC3339Nano, hederaTimestamp)
    if err != nil {
        log.Printf("Failed to parse Hedera timestamp: %v", err)
        return
    }
    
    // 2. Calculate punch time (consensus time + delay)
    punchTime := consensusTime.Add(time.Duration(delaySeconds) * time.Second)
    
    // 3. Schedule the hole punching
    go func() {
        time.Sleep(time.Until(punchTime))
        
        // 4. Perform hole punching
        performHolePunching(sellerIP, p2pHost, protocol)
    }()
}

func performHolePunching(sellerIP string, p2pHost host.Host, protocol protocol.ID) {
    // 1. Parse seller's address
    addrInfo, err := peer.AddrInfoFromString(sellerIP)
    if err != nil {
        log.Printf("Failed to parse seller address: %v", err)
        return
    }
    
    // 2. Use libp2p's hole punching capabilities
    ctx := context.Background()
    holePunchCtx := network.WithSimultaneousConnect(ctx, true, "hole-punching")
    forceDirectConnCtx := network.WithForceDirectDial(holePunchCtx, "hole-punching")
    
    // 3. Attempt connection with hole punching
    dialCtx, cancel := context.WithTimeout(forceDirectConnCtx, 30*time.Second)
    defer cancel()
    
    if err := p2pHost.Connect(dialCtx, *addrInfo); err != nil {
        log.Printf("Hole punching failed: %v", err)
        return
    }
    
    log.Printf("Hole punching successful with %s", addrInfo.ID)
    
    // 4. Create stream if connection successful
    stream, err := p2pHost.NewStream(dialCtx, addrInfo.ID, protocol)
    if err != nil {
        log.Printf("Failed to create stream after hole punching: %v", err)
        return
    }
    
    log.Printf("Stream created successfully after hole punching: %v", stream)
}
```

### 4. Enhanced Connection Management

#### 4.1 Update InitialConnect Function
```go
func InitialConnect(ctx context.Context, p2pHost host.Host, addrInfo peer.AddrInfo, buyerBuffers *NodeBuffers, protocol protocol.ID) error {
    // ... existing code ...
    
    // Add hole punching fallback
    conErr := HolePunchConnectIfNotConnected(ctx, p2pHost, addrInfo, true)
    if conErr != nil {
        // If direct connection fails, trigger hole punching protocol
        return fmt.Errorf("%s:connection failed, initiating hole punching: %w", types.CanNotConnectUnknownReason, conErr)
    }
    
    // ... rest of existing code ...
}
```

#### 4.2 Enhanced HolePunchConnectIfNotConnected
```go
func HolePunchConnectIfNotConnected(ctx context.Context, p2pHost host.Host, pi peer.AddrInfo, isClient bool) error {
    // First try direct connection
    dialCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
    defer cancel()
    
    if err := p2pHost.Connect(dialCtx, pi); err == nil {
        return nil // Direct connection succeeded
    }
    
    // If direct connection fails, try hole punching
    holePunchCtx := network.WithSimultaneousConnect(ctx, isClient, "hole-punching")
    forceDirectConnCtx := network.WithForceDirectDial(holePunchCtx, "hole-punching")
    dialCtx, cancel = context.WithTimeout(forceDirectConnCtx, 30*time.Second)
    defer cancel()
    
    if err := p2pHost.Connect(dialCtx, pi); err != nil {
        return fmt.Errorf("both direct connection and hole punching failed: %w", err)
    }
    
    log.Println("Hole punching successful with ", pi.ID)
    return nil
}
```

### 5. State Management

#### 5.1 Add Hole Punching States
```go
// Add to types/connection.go
const (
    // ... existing states ...
    HolePunchingScheduled types.ConnectionState = "HolePunchingScheduled"
    HolePunchingInProgress types.ConnectionState = "HolePunchingInProgress"
    HolePunchingCompleted types.ConnectionState = "HolePunchingCompleted"
)
```

#### 5.2 Update Buffer Management
```go
// Add hole punching metadata to NodeBufferInfo
type NodeBufferInfo struct {
    // ... existing fields ...
    HolePunchScheduledTime time.Time `json:"holePunchScheduledTime,omitempty"`
    HolePunchAttempts      int       `json:"holePunchAttempts,omitempty"`
}
```

### 6. Error Recovery and Retry Logic

#### 6.1 Hole Punching Retry Strategy
```go
func handleHolePunchingFailure(peerID peer.ID, sellerBuffers *commonlib.NodeBuffers) {
    buffer, exists := sellerBuffers.GetBuffer(peerID)
    if !exists {
        return
    }
    
    buffer.HolePunchAttempts++
    
    // Exponential backoff for retries
    maxAttempts := 3
    if buffer.HolePunchAttempts >= maxAttempts {
        log.Printf("Max hole punching attempts reached for peer %s", peerID)
        sellerBuffers.UpdateBufferLibP2PState(peerID, types.CanNotConnectUnknownReason)
        return
    }
    
    // Schedule retry with exponential backoff
    backoffDuration := time.Duration(1<<buffer.HolePunchAttempts) * time.Minute
    time.AfterFunc(backoffDuration, func() {
        // Trigger new hole punching attempt
        initiateHolePunching(peerID, sellerBuffers)
    })
}
```

### 7. Testing Strategy

#### 7.1 Unit Tests
- Test message serialization/deserialization
- Test encryption/decryption of IP addresses
- Test timestamp parsing and scheduling
- Test hole punching state transitions

#### 7.2 Integration Tests
- Test complete hole punching flow with two nodes behind NAT
- Test retry logic and failure scenarios
- Test concurrent hole punching attempts
- Test with different NAT types (symmetric, restricted cone, etc.)

#### 7.3 Network Tests
- Test with real NAT devices
- Test with different network configurations
- Test performance and timing accuracy
- Test with multiple simultaneous connections

### 8. Monitoring and Logging

#### 8.1 Enhanced Logging
```go
// Add structured logging for hole punching events
log.Printf("HOLE_PUNCHING: Initiating for peer %s at %s", peerID, punchTime)
log.Printf("HOLE_PUNCHING: Scheduled for %s (delay: %ds)", punchTime, delaySeconds)
log.Printf("HOLE_PUNCHING: Attempting connection to %s", addrInfo)
log.Printf("HOLE_PUNCHING: %s", result)
```

#### 8.2 Metrics Collection
- Hole punching success rate
- Average time to establish connection
- Number of retry attempts
- NAT type detection accuracy

### 9. Configuration Options

#### 9.1 Environment Variables
```bash
# Hole punching configuration
HOLE_PUNCH_DELAY=10          # Seconds to wait after Hedera consensus
HOLE_PUNCH_TIMEOUT=30        # Timeout for hole punching attempts
HOLE_PUNCH_MAX_RETRIES=3     # Maximum retry attempts
HOLE_PUNCH_ENABLED=true      # Enable/disable hole punching
```

#### 9.2 Command Line Flags
```go
var (
    HolePunchDelayFlag    = flag.Int("hole-punch-delay", 10, "Delay in seconds after Hedera consensus for hole punching")
    HolePunchTimeoutFlag  = flag.Int("hole-punch-timeout", 30, "Timeout for hole punching attempts")
    HolePunchMaxRetriesFlag = flag.Int("hole-punch-max-retries", 3, "Maximum hole punching retry attempts")
    HolePunchEnabledFlag  = flag.Bool("hole-punch-enabled", true, "Enable hole punching")
)
```

## Implementation Phases

### Phase 1: Core Message Types (Week 1)
- [v] Define new message types in `types/messages.go`
- [v] Add message type constants and validation
- [v] Update message parsing logic

### Phase 2: Seller Side Implementation (Week 2)
- [ ] Implement `preparePunchMeRequest` function
- [ ] Update seller error handling for `PunchMe` action
- [ ] Add hole punching state management

### Phase 3: Buyer Side Implementation (Week 3)
- [ ] Implement `handlePunchMeRequest` function
- [ ] Implement `preparePunchMeAcknowledgment` function
- [ ] Add synchronized hole punching logic

### Phase 4: Enhanced Connection Management (Week 4)
- [ ] Update `InitialConnect` function
- [ ] Enhance `HolePunchConnectIfNotConnected`
- [ ] Add retry logic and failure handling

### Phase 5: Testing and Validation (Week 5)
- [ ] Write unit tests
- [ ] Create integration test scenarios
- [ ] Test with real NAT devices

### Phase 6: Monitoring and Optimization (Week 6)
- [ ] Add comprehensive logging
- [ ] Implement metrics collection
- [ ] Performance optimization

## Success Criteria

1. **Connection Success Rate**: >90% success rate for nodes behind NAT
2. **Connection Time**: <30 seconds average time to establish connection
3. **Reliability**: Robust retry logic with exponential backoff
4. **Compatibility**: Works with existing libp2p hole punching mechanisms
5. **Monitoring**: Comprehensive logging and metrics for debugging

## Risks and Mitigation

### Risks
1. **Timing Accuracy**: Local clocks may not be perfectly synchronized
2. **NAT Behavior**: Different NAT types may behave differently
3. **Network Congestion**: May affect hole punching success rate
4. **Hedera Latency**: Network delays may affect coordination

### Mitigation
1. **Clock Synchronization**: Use Hedera consensus timestamp as reference
2. **NAT Detection**: Implement NAT type detection and adaptive strategies
3. **Retry Logic**: Robust retry mechanisms with exponential backoff
4. **Timeout Handling**: Appropriate timeouts for all operations
5. **Fallback Mechanisms**: Graceful degradation when hole punching fails

## Future Enhancements

1. **NAT Type Detection**: Automatic detection of NAT type for optimal strategy
2. **Adaptive Delays**: Dynamic adjustment of punch delays based on network conditions
3. **Multi-Path Hole Punching**: Attempt hole punching on multiple ports simultaneously
4. **Relay Fallback**: Use relay nodes when hole punching fails
5. **Connection Pooling**: Maintain multiple connection paths for redundancy

